variables:
  AUTO_DEPLOY_IMAGE_VERSION: v2.50.0
  CI_TEMPLATE_REGISTRY_HOST: registry.gitlab.com
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  HELM_VERSION: 3.10.2
  KUBE_CONTEXT: voltaire/www.1694.io:1694
  KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: gitlab-admin
  KUBERNETES_VERSION: 1.24.9
  DEPLOY_CARDANO_DBSYNC:
    value: "false"
    description: "Install cardano dbsync services (ogmios, hasura, postgres, grapql)"
  DEPLOY_INFRA:
    value: "false"
    description: "Install infrastructure services (redis, db-sync)"
  DEPLOY_WEBSITE:
    value: "true"
    description: "Build and deploy www.lidonation.com"
  CYPRESS_CACHE_FOLDER: '$CI_PROJECT_DIR/frontend/cache/Cypress'

stages:
  - build
  - sancho
  - preview
  - production
  - test

before_script:
  - |
    export APP_VERSION=$(awk '/version/{gsub(/("|",)/,"",$2);print $2};' frontend/package.json)
    export APP_VERSION_AND_BUILD="${APP_VERSION}-${CI_PIPELINE_ID}"
    export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE
    export CI_APPLICATION_TAG=$APP_VERSION_AND_BUILD

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ./node_modules

services:
  - name: docker:dind
    alias: docker
    command: ["--tls=false"]

.auto-deploy:
  image: "${CI_TEMPLATE_REGISTRY_HOST}/gitlab-org/cluster-integration/auto-deploy-image:${AUTO_DEPLOY_IMAGE_VERSION}"
  dependencies: []

.setup: &setup
  - apk add --no-cache ca-certificates curl bash openssl git
  - curl -LO https://dl.k8s.io/release/v1.25.9/bin/linux/amd64/kubectl && chmod +x kubectl && mv kubectl /usr/local/bin/kubectl
  - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 && chmod 700 get_helm.sh && DESIRED_VERSION=v$HELM_VERSION ./get_helm.sh
  - kubectl config get-contexts
  - kubectl config use-context voltaire/www.1694.io:1694

.infra_rules: &infra_rules
  - if: '$CI_COMMIT_BRANCH == "main" &&
      ($DEPLOY_INFRA == "true")'
    when: manual
  - if: '$CI_COMMIT_BRANCH != "main" &&
      ($DEPLOY_INFRA == "true")'
    when: manual

.deploy_template: &deploy_template
  image: alpine:3.16.1
  retry: 0
  cache: {}

.deploy_postgres_web_script: &deploy_postgres_web_script
    - |
      DEPLOYMENT_NAME="www-1694-$CI_ENVIRONMENT_SLUG"
      helm repo add bitnami https://charts.bitnami.com/bitnami
      helm repo update

      echo "install postgres for web"
      helm upgrade --install \
          --timeout 300s \
          --wait \
          --atomic \
          --namespace="$KUBE_NAMESPACE" \
          --create-namespace \
          -f ./chart/values.postgresql.yaml \
          --set global.postgresql.auth.username="$POSTGRESQL_WEB_USERNAME" \
          --set global.postgresql.auth.database="$POSTGRESQL_WEB_DATABASE" \
          --set global.postgresql.auth.password="$POSTGRESQL_WEB_PASSWORD" \
          --set global.postgresql.auth.postgresPassword="$POSTGRESQL_WEB_POSTGRES_PASSWORD" \
          --set primary.persistence.size="$POSTGRESQL_WEB_SIZE" \
          --set namespace=$KUBE_NAMESPACE \
          $DEPLOYMENT_NAME-web-db \
          bitnami/postgresql


.deploy_postgres_dbsync_script: &deploy_postgres_dbsync_script
    - |
      DEPLOYMENT_NAME="www-1694-$CI_ENVIRONMENT_SLUG"
      helm repo add bitnami https://charts.bitnami.com/bitnami
      helm repo update

      echo "install postgres for dbsync"
      helm upgrade --install \
          --timeout 300s \
          --wait \
          --atomic \
          --namespace="$KUBE_NAMESPACE" \
          --create-namespace \
          -f ./chart/values.postgresql.yaml \
          --set global.postgresql.auth.username="$POSTGRESQL_DBSYNC_USERNAME" \
          --set global.postgresql.auth.database="$POSTGRESQL_DBSYNC_DATABASE" \
          --set global.postgresql.auth.password="$POSTGRESQL_DBSYNC_PASSWORD" \
          --set global.postgresql.auth.postgresPassword="$POSTGRESQL_DBSYNC_POSTGRES_PASSWORD" \
          --set primary.persistence.size="$POSTGRESQL_DBSYNC_SIZE" \
          --set namespace=$KUBE_NAMESPACE \
          $DEPLOYMENT_NAME-dbsync-db \
          bitnami/postgresql



build_frontend:
  stage: build
  image: docker:24.0.2-git
  retry: 1
  script:
    - *setup
    - |
      set -xev
      cp $ENV_FILE_NEXT_PUBLIC_TEMPLATE frontend/.env.production
      # cat $ENV_FILE_FRONTEND > frontend/.env.production
      
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo "Building Dockerfile with tags $CI_APPLICATION_REPOSITORY/1694.io-frontend:$CI_APPLICATION_TAG and $CI_APPLICATION_REPOSITORY/www.1694.io-frontend:latest ..."
      docker build --network host -f frontend/Dockerfile \
        -t "$CI_APPLICATION_REPOSITORY/1694.io-frontend:$CI_APPLICATION_TAG" \
        -t "$CI_APPLICATION_REPOSITORY/1694.io-frontend:latest" .
      
      docker push "$CI_APPLICATION_REPOSITORY/1694.io-frontend:$CI_APPLICATION_TAG"
      docker push "$CI_APPLICATION_REPOSITORY/1694.io-frontend:latest"
  rules:
    - if: '$DEPLOY_WEBSITE == "true"'

build_backend:
  stage: build
  image: docker:24.0.2-git
  retry: 1
  script:
    - *setup
    - |
      set -xev
      
      cp $ENV_FILE backend/.env.production
      cat $ENV_FILE_BACKEND > backend/.env.production
      cat $ENV_FILE_FRONTEND > frontend/.env.production
      cp backend/.env.production ./chart/backend_env
            
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo "Building Dockerfile with tags $CI_APPLICATION_REPOSITORY/1694.io-backend:$CI_APPLICATION_TAG and $CI_APPLICATION_REPOSITORY/www.1694.io-backend:latest ..."
      
      docker build --network host -f backend/Dockerfile \
        -t "$CI_APPLICATION_REPOSITORY/1694.io-backend:$CI_APPLICATION_TAG" \
        -t "$CI_APPLICATION_REPOSITORY/1694.io-backend:latest" .
      docker push "$CI_APPLICATION_REPOSITORY/1694.io-backend:$CI_APPLICATION_TAG"
      docker push "$CI_APPLICATION_REPOSITORY/1694.io-backend:latest"
  rules:
    - if: '$DEPLOY_WEBSITE == "true"'

.deploy_postgres_web: &deploy_postgres_web
  <<: *deploy_template
  script:
    - *setup
    - *deploy_postgres_web_script
  rules: *infra_rules

.deploy_postgres_dbsync: &deploy_postgres_dbsync
  <<: *deploy_template
  script:
    - *setup
    - *deploy_postgres_dbsync_script
  rules: *infra_rules

postgres-app-sancho:
  <<: *deploy_postgres_web
  stage: sancho
  needs: []
  environment:
    name: sancho

postgres-dbsync-sancho:
  <<: *deploy_postgres_dbsync
  stage: sancho
  needs: []
  environment:
    name: sancho

app-sancho:
  image: "${CI_TEMPLATE_REGISTRY_HOST}/gitlab-org/cluster-integration/auto-deploy-image:${AUTO_DEPLOY_IMAGE_VERSION}"
  stage: sancho
  script:
    - *setup
    - auto-deploy check_kube_domain
    - auto-deploy download_chart
    - auto-deploy create_secret
    - |
      set -xev
      
      DEPLOYMENT_NAME="www-1694.$CI_ENVIRONMENT_SLUG"    
      cp $ENV_FILE backend/.env.production
      cat $ENV_FILE_BACKEND > backend/.env.production
      cat $ENV_FILE_FRONTEND > frontend/.env.production
      cp backend/.env.production ./chart/backend_env
      
      cp $ENV_FILE frontend/.env.production
      cat $ENV_FILE_FRONTEND > frontend/.env.production
      cp frontend/.env.production ./chart/frontend_env
      cp $ENV_FILE_FRONTEND ./chart/frontend_env
      
      kubectl delete secret 1694-registry-deploy-token --ignore-not-found --namespace="$KUBE_NAMESPACE"
      
      kubectl create secret docker-registry 1694-registry-deploy-token \
        --namespace="$KUBE_NAMESPACE" \
        --docker-server=registry.lidonation.com \
        --docker-username=$CI_REGISTRY_USER \
        --docker-password=$CI_REGISTRY_PASSWORD \
        --docker-email=$REGISTRY_EMAIL      
      
       helm template ./chart --debug \
        -f ./chart/values.yaml \
        --set image.repository=$CI_APPLICATION_REPOSITORY/www.1694.io \
        --set secrets.NEXT_PUBLIC_GOOGLE_API="$NEXT_PUBLIC_GOOGLE_API" \
        --set ingress.hosts[0]="$AUTO_DEVOPS_WEB_DOMAIN" \
        --set image.tag=$CI_APPLICATION_TAG \
        --namespace="$KUBE_NAMESPACE" \
        --create-namespace    
      
      helm upgrade $DEPLOYMENT_NAME ./chart --install \
        -f ./chart/values.yaml \
        --timeout 300s \
        --wait \
        --atomic \
        --namespace="$KUBE_NAMESPACE" \
        --set image.tag=$CI_APPLICATION_TAG \
        --set backend.replicaCount=1 \
        --set frontend.replicaCount=1 \
        --set secrets.NEXT_PUBLIC_GOOGLE_API="$NEXT_PUBLIC_GOOGLE_API" \
        --set ingress.hosts[0]="$AUTO_DEVOPS_WEB_DOMAIN" \
        --namespace="$KUBE_NAMESPACE" \
        --create-namespace
    - auto-deploy persist_environment_url
  artifacts:
    paths: [ environment_url.txt ]
  needs:
    - job: build_frontend
    - job: build_backend
  environment:
    name: sancho
  rules:
    - if: '$DEPLOY_WEBSITE == "true"'

postgres-app-preview:
  <<: *deploy_postgres_web
  stage: preview
  needs: []
  environment:
    name: preview

postgres-dbsync-preview:
  <<: *deploy_postgres_dbsync
  stage: preview
  needs: []
  environment:
    name: preview

app-preview:
  image: "${CI_TEMPLATE_REGISTRY_HOST}/gitlab-org/cluster-integration/auto-deploy-image:${AUTO_DEPLOY_IMAGE_VERSION}"
  stage: preview
  script:
    - *setup
    - auto-deploy check_kube_domain
    - auto-deploy download_chart
    - auto-deploy create_secret
    # - auto-deploy ensure_namespace
    - |
      set -xev
      
      DEPLOYMENT_NAME="www-1694.$CI_ENVIRONMENT_SLUG"    
      cp $ENV_FILE backend/.env.production
      cat $ENV_FILE_BACKEND > backend/.env.production
      cat $ENV_FILE_FRONTEND > frontend/.env.production
      cp backend/.env.production ./chart/backend_env
      
      cp $ENV_FILE frontend/.env.production
      cat $ENV_FILE_FRONTEND > frontend/.env.production
      cp frontend/.env.production ./chart/frontend_env
      cp $ENV_FILE_FRONTEND ./chart/frontend_env
      
      kubectl delete secret 1694-registry-deploy-token --ignore-not-found --namespace="$KUBE_NAMESPACE"
      
      kubectl create secret docker-registry 1694-registry-deploy-token \
        --namespace="$KUBE_NAMESPACE" \
        --docker-server=registry.lidonation.com \
        --docker-username=$CI_REGISTRY_USER \
        --docker-password=$CI_REGISTRY_PASSWORD \
        --docker-email=$REGISTRY_EMAIL
      
      echo "AUTO_DEVOPS_WEB_DOMAIN: $AUTO_DEVOPS_WEB_DOMAIN"
      
      helm upgrade $DEPLOYMENT_NAME ./chart --install \
        -f ./chart/values.yaml \
        --timeout 300s \
        --wait \
        --atomic \
        --namespace="$KUBE_NAMESPACE" \
        --set image.tag=$CI_APPLICATION_TAG \
        --set backend.replicaCount=1 \
        --set frontend.replicaCount=1 \
        --set secrets.NEXT_PUBLIC_GOOGLE_API="$NEXT_PUBLIC_GOOGLE_API" \
        --set ingress.hosts[0]="$AUTO_DEVOPS_WEB_DOMAIN" \
        --set namespace=$KUBE_NAMESPACE \
        --namespace="$KUBE_NAMESPACE" \
        --create-namespace
    - auto-deploy persist_environment_url
  artifacts:
    paths: [ environment_url.txt ]
  needs:
    - job: build_frontend
    - job: build_backend
  environment:
    name: preview
  rules:
    - if: $DEPLOY_WEBSITE == 'true'
      when: manual

postgres-app-production:
  <<: *deploy_postgres_web
  stage: production
  needs:
    - job: postgres-app-preview
  environment:
    name: production

postgres-dbsync-production:
  <<: *deploy_postgres_dbsync
  stage: production
  environment:
    name: production
  needs:
    - job: postgres-dbsync-preview

production:
  stage: production
  image: "${CI_TEMPLATE_REGISTRY_HOST}/gitlab-org/cluster-integration/auto-deploy-image:${AUTO_DEPLOY_IMAGE_VERSION}"
  environment:
    name: production
  script:
    - auto-deploy check_kube_domain
    - auto-deploy download_chart
    - auto-deploy create_secret
    # - auto-deploy ensure_namespace
    - |      
      DEPLOYMENT_NAME="www-1694.$CI_ENVIRONMENT_SLUG"
      
      cp $ENV_FILE backend/.env.production
      cat $ENV_FILE_BACKEND > backend/.env.production
      cat $ENV_FILE_FRONTEND > frontend/.env.production
      cp backend/.env.production ./chart/backend_env
      
      cp $ENV_FILE frontend/.env.production
      cat $ENV_FILE_FRONTEND > frontend/.env.production
      cp frontend/.env.production ./chart/frontend_env
      cp $ENV_FILE_FRONTEND ./chart/frontend_env
      
      helm upgrade $DEPLOYMENT_NAME ./chart --install \
        -f ./chart/values.yaml \
        --timeout 300s \
        --wait \
        --atomic \
        --set image.repository=$CI_APPLICATION_REPOSITORY/www.1694.io \
        --set image.tag=$CI_APPLICATION_TAG \
        --set backend.replicaCount=5 \
        --set frontend.replicaCount=5 \
        --set secrets.NEXT_PUBLIC_GOOGLE_API="$NEXT_PUBLIC_GOOGLE_API" \
        --set ingress.hosts[0]="$AUTO_DEVOPS_WEB_DOMAIN" \
        --set namespace=$KUBE_NAMESPACE \
        --namespace="$KUBE_NAMESPACE" \
        --create-namespace
    - auto-deploy persist_environment_url
  artifacts:
    paths: [ environment_url.txt ]
  needs:
    - job: app-preview
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && ($DEPLOY_WEBSITE == "true")'
      when: manual

ui-chrome-tests:
  image: cypress/included:cypress-13.13.1-node-20.15.1-chrome-126.0.6478.126-1-ff-128.0-edge-126.0.2592.102-1
  stage: test
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/.cache/*
      - frontend/cache/Cypress
      - frontend/*node_modules
      - frontend/build
  script:
    - cd frontend
    - yarn install --frozen-lockfile
    # start the server in the background
    - yarn run build
    - yarn run start 
    # run Cypress tests in parallel
    - npx cypress run 
  artifacts:
    when: on_failure
    paths:
      - ${PWD}/frontend/cypress/videos/**/*.mp4
      - ${PWD}/frontend/cypress/screenshots/**/*.png
    expire_in: 1 day
